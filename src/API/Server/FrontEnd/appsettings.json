{
    "Logging": {
        "LogLevel": {
            "Default": "Error",
            "Microsoft": "Critical",
            "Microsoft.Hosting.Lifetime": "Information",
            "Microsoft.AspNetCore.Mvc": "Error",
            "CodeProject": "Error",
            "CodeProject.SenseAI.API.Server": "Error",
            "CodeProject.SenseAI.Analysis.Yolo": "Error"
        }
    },

    // Kestrel
    "AllowedHosts": "*",
    "ForceHttps": false,

    // Checking for updates
    "UpdateCheckUrl": "https://www.codeproject.com/ai/sense/version.aspx",
    "UpdateDownloadUrl": "https://www.codeproject.com/ai/sense/latest.aspx",

    // Will we be launching the backend analysis modules when the server starts? (handy to disable
    // for debugging the modules separately)
    "LaunchAnalysisServices": true,

    // Request queue settings
    "BackendOptions": {
        "ResponseTimeout": "00:00:30",
        "CommandDequeueTimeout": "00:00:10",
        "MaxQueueLength": 32
    },

    "FrontEndOptions": {

        // The root of the application, relative to the current application working directory. In 
        // production, the SenseAI server sits in the /Server dir, so we need to go up one level to
        // get to the root path
        "ROOT_PATH": "..",

        // The location of the AI modules
        "MODULES_PATH": "%ROOT_PATH%\\AnalysisLayer",

        // The location of "the" Python interpreter. In Development mode, the Python folder will go
        // under an OS specific folder. This allows the same repo to run under Windows and Linux.
        // We say "the" python interpreter because future versions may support multiple Python
        // versions
        "PYTHON_BASEPATH": "%MODULES_PATH%\\bin\\Python37\\venv",
        "PYTHON37_PATH": "%PYTHON_BASEPATH%\\scripts\\Python",

        // "SERVEREXE_DIRNAME": "server", // dir name containing the API server exe for production. 
        // "APICODE_DIRNAME": "api",      // dir name containing all the API server code. 

        // These key/values are added to the set of environment variables when the backend
        // processed are launched.
        "BackendEnvironmentVariables": {

            // Shared values
            "ERRLOG_APIKEY": "ed359c3a-8a77-4f23-8db3-d3eb5fac23d9",
            "PORT": 5000,
            "VIRTUAL_ENV": "%PYTHON_BASEPATH%",

            // For Text
            "NLTK_DATA": "%MODULES_PATH%\\TextSummary\\nltk_data",

            // For Legacy Modules
            "VISION-FACE": true,
            "VISION-DETECTION": false,
            "VISION-SCENE": true,

            // For the .NET YOLO Module...
            "CPSENSEAI-YOLO": true,

            "APPDIR": "%MODULES_PATH%\\DeepStack\\intelligencelayer",
            "DATA_DIR": "%MODULES_PATH%\\DeepStack\\datastore",
            "TEMP_PATH": "%MODULES_PATH%\\DeepStack\\tempstore",
            "MODELS_DIR": "%MODULES_PATH%\\DeepStack\\assets",
            "PROFILE": "desktop_cpu",
            "CUDA_MODE": "False",
            "MODE": "MEDIUM"
        },

        // The processes (typically the backend analysis processes) that are to be started when the
        // server starts. They will be started in order of appearance. For "Command" we currently
        // provide the %PYTHON37_PATH% macro that will point to an instance of the Python 3.7
        // interpreter in a virtual environment if needed.
        "StartupProcesses": {

            "TextSummary": {
                "Name": "Text Summary",
                "Activate": true,
                "EnableFlags": [ "TEXT-SUMMARY" ],
                "Queues": [ "summary_queue" ],
                "RouteMaps": [
                    {
                        "Path": "text/summarize",
                        "Queue": "summary_queue",
                        "Command": "summarize"
                    }
                ],
                "Command": "%PYTHON37_PATH%",
                "Args": "textsummary.py",
                "WorkingDirectory": "%MODULES_PATH%\\TextSummary",
                "Platforms": [ "windows", "linux", "osx" ]
            },

            "FaceProcessing": {
                "Name": "Face Processing",
                "Activate": true,
                "EnableFlags": [ "VISION-FACE" ],
                "Queues": [ "face_queue" ],
                "RouteMaps": [
                    {
                        "Path": "vision/face",
                        "Queue": "face_queue",
                        "Command": "detect"
                    },
                    {
                        "Path": "vision/face/match",
                        "Queue": "face_queue",
                        "Command": "match"
                    },
                    {
                        "Path": "vision/face/list",
                        "Queue": "face_queue",
                        "Command": "list"
                    },
                    {
                        "Path": "vision/face/register",
                        "Queue": "face_queue",
                        "Command": "register"
                    },
                    {
                        "Path": "vision/face/delete",
                        "Queue": "face_queue",
                        "Command": "delete"
                    },
                    {
                        "Path": "vision/face/recognize",
                        "Queue": "face_queue",
                        "Command": "recognize"
                    }
                ],
                "Command": "%PYTHON37_PATH%",
                "Args": "face.py",
                "WorkingDirectory": "%MODULES_PATH%\\DeepStack\\intelligencelayer",
                "Platforms": [ "windows", "linux", "osx" ]
            },

            "SceneClassification": {
                "Name": "Scene Classification",
                "Activate": true,
                "EnableFlags": [ "VISION-SCENE" ],
                "Queues": [ "scene_queue" ],
                "RouteMaps": [
                    {
                        "Path": "vision/scene",
                        "Queue": "scene_queue",
                        "Command": "detect"
                    }
                ],
                "Command": "%PYTHON37_PATH%",
                "Args": "scene.py",
                "WorkingDirectory": "%MODULES_PATH%\\DeepStack\\intelligencelayer",
                "Platforms": [ "windows", "linux", "osx" ]
            },

            "ObjectDetection": {
                "Name": "SenseAI Object Detection",
                "Activate": true,
                "EnableFlags": [ "CPSENSEAI-YOLO" ],
                "Queues": [ "detection_queue" ],
                "RouteMaps": [
                    {
                        "Path": "vision/detection",
                        "Queue": "detection_queue",
                        "Command": "detect"
                    }
                ],
                "Command": "dotnet",
                "Args": "\"%MODULES_PATH%\\CodeProject.SenseAI.AnalysisLayer.Yolo\\CodeProject.SenseAI.AnalysisLayer.Yolo.dll\"",
                "WorkingDirectory": "%MODULES_PATH%\\CodeProject.SenseAI.AnalysisLayer.Yolo",
                "Platforms": [ "windows", "linux", "osx" ]
            },

            // We've replaced this with the SenseAI Object Detection (above). We're leaving it here
            // so you can see the effect of disabling a module.
            "LegacyObjectDetection": {
                "Name": "Legacy Object Detection",
                "Activate": false,
                "EnableFlags": [ "VISION-DETECTION" ],
                "Queues": [ "detection_queue" ],
                "RouteMaps": [
                    {
                        "Path": "vision/detection",
                        "Queue": "detection_queue",
                        "Command": "detect"
                    }
                ],
                "Command": "%PYTHON37_PATH%",
                "Args": "detection.py",
                "WorkingDirectory": "%MODULES_PATH%\\DeepStack\\intelligencelayer",
                "Platforms": [ "linux", "osx", "windows" ]
            }
        }
    }
}
